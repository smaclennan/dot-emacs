;;; caps-mode.el --- Capitalize Sentences Minor Mode

;; Copyright (C) 2013 Sean MacLennan

;; This program is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation; either version 2, or (at your option)
;; any later version.

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with GNU Emacs; see the file COPYING.  If not, write to the
;; Free Software Foundation, Inc., 59 Temple Place - Suite 330,
;; Boston, MA 02111-1307, USA.

(defvar cm-keymap nil "Keymap used by caps mode.")
(unless cm-keymap
  (setq cm-keymap (make-sparse-keymap "Caps Mode"))
  (loop for ch  in '(?. ?! ??) do
    (define-key cm-keymap ch 'cm-period))
  (loop for ch from ?a to ?z do
    (define-key cm-keymap ch 'cm-alpha))
  (loop for ch from ?A to ?Z do
    (define-key cm-keymap ch 'cm-alpha)))

(defvar caps-mode-hook nil)
(defvar caps-mode-on-hook nil)
(defvar caps-mode-off-hook nil)

(defvar cm-up-next-char nil)
(make-variable-buffer-local 'cm-up-next-char)

(define-minor-mode caps-mode "Caps Mode" nil " Caps" cm-keymap)

(defun cm-period ()
  (interactive)
  (self-insert-command 1)
  (setq cm-up-next-char t))

(defun cm-alpha (arg)
  (interactive "p")
  (if (or cm-up-next-char (bobp))
      (progn
	(insert (upcase last-command-char))
	(setq cm-up-next-char nil))
    (self-insert-command arg)))

(provide 'caps-mode)
