
;; 0 Find this C symbol:
;; 1 Find this function definition:
;; 2 Find functions called by this function:
;; 3 Find functions calling this function:
;; 4 Find this text string:
;; 5 Change this text string:
;; 6 Find this egrep pattern:
;; 7 Find this file:
;; 8 Find files #including this file:
;; 9 Find assignments to this symbol:

(defvar my-cscope-prog "cscope" "* The cscope program.")

;; Note: -R has no extra overhead if you have no subdirs
(defvar my-cscope-args "-R" "* Extra cscope arguments.")

(defvar my-cscope-dir nil
  "* Directory to look for cscope files in. If set, only this
directory is used. Must end in /.")

(require 'compile)
(require 'etags)

(defun mcs-dir (path)
  "Find the cscope.out file directory. Use `my-cscope-dir' if
set, else start looking at PATH."
  (if my-cscope-dir
      my-cscope-dir
    (let ((dir path))
      (catch 'found
	(while t
	  (when (file-exists-p (concat dir "cscope.out"))
	    (throw 'found dir))
	  (unless (string-match "\\(.*/\\)[^/]+/?$" dir)
	    (throw 'found nil))
	  (setq dir (match-string 1 dir)))))))

(defun mcs-lookup (sym)
  "Use cscope to lookup symbol SYM. SYM must start with 0 to 9 inclusive."
  (let ((cmd (concat my-cscope-prog " " my-cscope-args " -L -" sym))
	(dir default-directory)
	list fname line str)
    (shell-command cmd "*my-cscope*")
    (save-current-buffer
      (set-buffer "*my-cscope*") ;; WARNING: can change default-directory
      (goto-char (point-min))
      (insert (concat "-*- mode: compilation; default-directory: \"" dir "\" -*-\n"))
      (while (re-search-forward "^\\([^ ]+\\)\\( [^ ]+ \\)\\([0-9]+\\)" nil t)
	(setq fname (concat dir (match-string 1))
	      str   (match-string 2)
	      line  (match-string 3))
	(replace-match (concat fname ":" line ":1" str))
	(setq list (nconc list (list (list fname line)))))

      (compilation-mode "cscope")
      (setq buffer-read-only nil)
      (compilation--parse-region (point-min) (point-max))
      (goto-char (point-min))
      list)))

(defun mcs-goto (this)
  (let ((filename (nth 0 this))
	(line (string-to-number (nth 1 this))))
    (find-file filename)
    (goto-line line)))

;;;###autoload
(defun my-cscope (sym)
  (interactive "sSym: ")
  (let ((dir (mcs-dir default-directory)))
    (unless dir
      (if (yes-or-no-p "No cscope.out file found, continue? ")
	  (setq dir (if my-cscope-dir my-cscope-dir default-directory))
	(error "Giving up")))
    (let ((default-directory dir)
	  list)
      (setq list (mcs-lookup (concat "1" sym)))
      (push-tag-mark)
      (if (eq (length list) 1)
	  (mcs-goto (car list))
	(display-buffer "*my-cscope*" '(nil (window-height . 16)))))))

;;;###autoload
(defun my-cscope-at-point ()
  (interactive)
  (my-cscope (current-word)))
