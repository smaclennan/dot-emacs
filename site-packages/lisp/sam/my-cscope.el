
;; 0 Find this C symbol:
;; 1 Find this function definition:
;; 2 Find functions called by this function:
;; 3 Find functions calling this function:
;; 4 Find this text string:
;; 5 Change this text string:
;; 6 Find this egrep pattern:
;; 7 Find this file:
;; 8 Find files #including this file:
;; 9 Find assignments to this symbol:

(defvar my-cscope-prog "cscope" "* The cscope program.")

;; Note: -R has no extra overhead if you have no subdirs
(defvar my-cscope-args "-R" "* Extra cscope arguments.")

(defvar my-cscope-dir nil
  "* Directory to look for cscope files in. If set, only this
directory is used. Must end in /.")

(defvar mcs-regexp "^\\([^ ]+\\)\\( [^ ]+ \\)\\([0-9]+\\)"
  "* Regular expression to match filename and line.")

(require 'sam-common)
(require 'compile)
(require 'etags)

(defun mcs-dir (path)
  "Find the cscope.out file directory. Use `my-cscope-dir' if
set, else start looking at PATH."
  (if my-cscope-dir
      my-cscope-dir
    (let ((dir path))
      (catch 'found
	(while t
	  (when (file-exists-p (concat dir "cscope.out"))
	    (throw 'found dir))
	  (unless (string-match "\\(.*/\\)[^/]+/?$" dir)
	    (throw 'found nil))
	  (setq dir (match-string 1 dir)))))))

;; Deal with XEmacs vs GNU Emacs differences in compile
(my-feature-cond
  (emacs
   (defun mcs-lookup (cmd)
     "Run the cscope command CMD."
     (let ((dir default-directory)
	   list this)
       (shell-command cmd "*cscope*")
       (save-current-buffer
	 (set-buffer "*cscope*") ;; WARNING: can change default-directory
	 (goto-char (point-min))
	 (insert (concat "-*- mode: compilation; default-directory: \"" dir "\" -*-\n"))
	 (while (re-search-forward mcs-regexp nil t)
	   (setq this (list (match-string 1) (match-string 3) (match-string 2)))
	   (replace-match (concat (nth 0 this) ":" (nth 1 this) ":1" (nth 2 this)))
	   (setq list (nconc list (list this))))

	 (compilation-mode "cscope")
	 (setq buffer-read-only nil)
	 (compilation--parse-region (point-min) (point-max))
	 (goto-char (point-min)))
       (if (eq (length list) 1)
	   (mcs-goto (car list))
	 (display-buffer "*cscope*" '(nil (window-height . 16))))))
   ) ;; Emacs

  (xemacs
   (defvar mcs-regexp-alist (list (list mcs-regexp 1 3)))

   (defun mcs-cscope-finished (buffer desc)
     (when (equal (buffer-name buffer) "*cscope*")
       (let (list)
	 (goto-char (point-min))
	 (while (re-search-forward mcs-regexp nil t)
	   (setq list (nconc list (list (list (match-string 1) (match-string 3))))))
	 (goto-char (point-min))
	 (when (eq (length list) 1)
	   (mcs-goto (car list))))))

   (defun mcs-lookup (cmd)
     "Run the cscope command CMD."
     (setq compilation-finish-function 'mcs-cscope-finished)
     (compile-internal cmd "No more entries." "cscope" nil mcs-regexp-alist))
   )) ;; XEmacs

(defun mcs-goto (this)
  (let ((filename (nth 0 this))
	(line (string-to-number (nth 1 this))))
    (find-file filename)
    (my-feature-cond
      (emacs (with-no-warnings (goto-line line)))
      (t (goto-line line)))))

;;;###autoload
(defun my-cscope (type sym)
  (interactive "p\nsSym: ")
  (when (or (< type 0) (> type 9))
    (error "invalid type %d: must be 0 to 9 inclusive." type))

  (let ((dir (mcs-dir default-directory)))
    (unless dir
      (if (yes-or-no-p "No cscope.out file found, continue? ")
	  (setq dir (if my-cscope-dir my-cscope-dir default-directory))
	(error "Giving up")))
    (let ((default-directory dir)
	  (cmd (concat my-cscope-prog " " my-cscope-args " -L -"
			(number-to-string type) sym)))
      (push-tag-mark)
      (mcs-lookup cmd))))

;;;###autoload
(defun my-cscope-at-point (type)
  (interactive "p")
  (my-cscope type (current-word)))
