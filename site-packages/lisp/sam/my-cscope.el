;;; my-cscope.el --- Yet another cscope interface

;; Copyright (C) 2017 Sean MacLennan

;; This program is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation; either version 2, or (at your option)
;; any later version.

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with GNU Emacs; see the file COPYING.  If not, write to the
;; Free Software Foundation, Inc., 59 Temple Place - Suite 330,
;; Boston, MA 02111-1307, USA.

;; For the menu do something like:
;; (add-hook 'c-mode-hook 'my-cscope-setup)

(defgroup my-cscope nil "cscope variables" :group 'tools)

(defcustom my-cscope-prog "cscope" "* The cscope program.")

;; Note: -R has no extra overhead if you have no subdirs
(defcustom my-cscope-args "-R" "* Extra cscope arguments.")

(defcustom my-cscope-dir nil
  "* Directory to look for cscope files in. If set, only this
directory is used. Must end in /.")

(defvar mcs-regexp "^\\([^ ]+\\)\\( [^ ]+ \\)\\([0-9]+\\)"
  "* Regular expression to match filename and line.")

(require 'sam-common)
(require 'compile)
(require 'etags)

(defun mcs-dir (path)
  "Find the cscope.out file directory. Use `my-cscope-dir' if
set, else start looking at PATH."
  (if my-cscope-dir
      my-cscope-dir
    (let ((dir path))
      (catch 'found
	(while t
	  (when (file-exists-p (concat dir "cscope.out"))
	    (throw 'found dir))
	  (unless (string-match "\\(.*/\\)[^/]+/?$" dir)
	    (throw 'found nil))
	  (setq dir (match-string 1 dir)))))))

;; Deal with XEmacs vs GNU Emacs differences in compile
(my-feature-cond
  (emacs
   (defun mcs-lookup (cmd)
     "Run the cscope command CMD."
     (let ((dir default-directory)
	   list this)
       (shell-command cmd "*cscope*")
       (save-current-buffer
	 (set-buffer "*cscope*") ;; WARNING: can change default-directory
	 (goto-char (point-min))
	 (insert (concat "-*- mode: compilation; default-directory: \""
			 dir "\" -*-\n"))
	 (while (re-search-forward mcs-regexp nil t)
	   (setq this (list (match-string 1) (match-string 3) (match-string 2)))
	   (replace-match (concat (nth 0 this) ":"
				  (nth 1 this) ":1"
				  (nth 2 this)))
	   (setq list (nconc list (list this))))

	 (compilation-mode "cscope")
	 (setq buffer-read-only nil)
	 (compilation--parse-region (point-min) (point-max))
	 (goto-char (point-min)))
       (if (eq (length list) 1)
	   (mcs-goto (car list))
	 (display-buffer "*cscope*" '(nil (window-height . 16))))))
   ) ;; Emacs

  (xemacs
   (defvar mcs-regexp-alist (list (list mcs-regexp 1 3))
     "The regular expression alist used by `my-cscope'. See
`compilation-error-regexp-alist'.")

   (defun mcs-cscope-finished (buffer desc)
     (when (equal (buffer-name buffer) "*cscope*")
       (let (list)
	 (goto-char (point-min))
	 (while (re-search-forward mcs-regexp nil t)
	   (setq list (nconc list
			     (list (list (match-string 1) (match-string 3))))))
	 (goto-char (point-min))
	 (when (eq (length list) 1)
	   (mcs-goto (car list))))))

   (defun mcs-lookup (cmd)
     "Run the cscope command CMD."
     (setq compilation-finish-function 'mcs-cscope-finished)
     (compile-internal cmd "No more entries." "cscope" nil mcs-regexp-alist))
   )) ;; XEmacs

(defun mcs-goto (this)
  "Given a list of (filename line) goto the filename and line."
  (let ((filename (car this))
	(line (string-to-number (cadr this))))
    (find-file filename)
    (my-feature-cond
      (emacs (with-no-warnings (goto-line line)))
      (t (goto-line line)))))

;;;###autoload
(defun my-cscope (type &optional sym prompt)
  "Call cscope on SYM of type TYPE. Set a prefix arg for TYPE. TYPE
must be 0 to 9 inclusive (see man cscope).

SYM defaults to the current word at the point.

If there is only one result, then `my-cscope' will just goto the
symbol. If there are multiple results, then a compilation buffer
is shown and you can select the result or use `next-error' to go
through the results.

The cscope command run is:
`my-cscope-prog' `my-cscope-args' -L -<TYPE><SYM>."
(interactive "p")
  (when (or (< type 0) (> type 9))
    (error "invalid type %d: must be 0 to 9 inclusive." type))

  (unless sym
    (let ((word (current-word)))
      (unless prompt (setq prompt "Sym"))
      (setq sym (read-string (concat prompt " [" word "]: ") nil nil word))))

  (let ((dir (mcs-dir default-directory)))
    (unless dir
      (if (yes-or-no-p "No cscope.out file found, continue? ")
	  (setq dir (if my-cscope-dir my-cscope-dir default-directory))
	(error "Giving up")))
    (let ((default-directory dir)
	  (cmd (concat my-cscope-prog " " my-cscope-args " -L -"
			(number-to-string type) sym)))
      (push-tag-mark)
      (mcs-lookup cmd)))
  nil)

;; Helper functions for menu
(defun my-cscope-0 () (interactive) (my-cscope 0 nil "Sym"))
(defun my-cscope-1 () (interactive) (my-cscope 1 nil "Func"))
(defun my-cscope-2 () (interactive) (my-cscope 2 nil "Called"))
(defun my-cscope-3 () (interactive) (my-cscope 3 nil "Calling"))
(defun my-cscope-4 () (interactive) (my-cscope 4 nil "Text"))
(defun my-cscope-5 () (interactive) (my-cscope 5 nil "Test"))
(defun my-cscope-6 () (interactive) (my-cscope 6 nil "Egrep"))
(defun my-cscope-7 () (interactive) (my-cscope 7 nil "File"))
(defun my-cscope-8 () (interactive) (my-cscope 8 nil "Including"))
(defun my-cscope-9 () (interactive) (my-cscope 9 nil "Sym assign"))

(defun my-cscope-setup ()
  (message "my-cscope-setup") ;; SAM DBG
  (easy-menu-define my-cscope-menu nil "My Cscope Menu"
    '("Cscope"
      ["0 Find this C symbol" my-cscope-0 t]
      ["1 Find this function definition" my-cscope t]
      ["2 Find functions called by this function" my-cscope-2 t]
      ["3 Find functions calling this function" my-cscope-3 t]
      ["4 Find this text string" my-cscope-4 t]
      ["5 Change this text string" my-cscope-5 t]
      ["6 Find this egrep pattern" my-cscope-6 t]
      ["7 Find this file" my-cscope-7 t]
      ["8 Find files #including this file" my-cscope-8 t]
      ["9 Find assignments to this symbol" my-cscope-9 t]
      ))
  (easy-menu-add-item nil '("C") my-cscope-menu "Toggle")
  )

(provide 'my-cscope)
