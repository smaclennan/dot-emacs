;; ocra.el - RFC6287 HOTP
;; Copyright (C) 2013 Sean MacLennan <seanm@seanm.ca>
;;
;; This program is free software: you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 2 of the License, or
;; (at your option) any later version.
;;
;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.
;;
;; You should have received a copy of the GNU General Public License
;; along with this project; see the file COPYING.  If not, write to
;; the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
;; Boston, MA 02111-1307, USA.

(require 'hmac)

(defconst ocra-question-len 128)

(defconst ocra-64bit
  (if (string-match "x86_64" (shell-command-to-string "uname -m")) t nil))


(defun ocra-mangle (question)
  (let (len tmp odd)

    (setq tmp (make-string ocra-question-len 0))

    ;; count nibbles
    (loop for i from 0 to 7 with mask = 0 while (> question mask) finally (setq len i) do
      (setq mask (+ (lsh mask 4) #xf)))

    (setq odd (= (logand len 1) 1))
    (setq len (/ len 2)) ; convert from nibbles to bytes

    (when odd
      (aset tmp len (int-to-char (lsh (logand question #xf) 4)))
      (setq question (lsh question -4))
      )

    (setq len (1- len))

    (loop for i from len downto 0 do
      (aset tmp i (int-to-char (logand question #xff)))
      (setq question (lsh question -8)))

    tmp))

;; RFC6287
(defun ocra-generate (question secret suite)
  (let ((power 100000000) ;; default 8
	msg hash offset code-digits)

    (when (string-match "OCRA-1:HOTP-SHA1-\\([1-8]\\):" suite)
      (setq code-digits (string-to-number (match-string 1 suite)))
      (setq power (expt 10 code-digits)))

    (setq msg (concat suite (make-string 1 0) (ocra-mangle question)))
    (setq hash (hmac-sha1 secret msg t))
    (setq offset (logand (aref hash (- sha-digest-length 1)) #xf))

    (if ocra-64bit
	;; 64 bit just works
	(mod (logior (lsh (logand (aref hash offset) #x7f) 24)
		     (lsh (logand (aref hash (+ offset 1)) #xff) 16)
		     (lsh (logand (aref hash (+ offset 2)) #xff) 8)
		     (logand (aref hash (+ offset 3)) #xff))
	     power)
      ;; 32 bit emacs cannot handle 31 bit numbers. Since I do not use
      ;; this in a time critical manner (and usually 64bit anyway),
      ;; lets just let dc do the work!
      (let ((out (format "echo -e '16i\\n%02X%02X%02X%02X\\n%X\\n%%p' | dc"
			 (logand (aref hash offset) #x7f)
			 (logand (aref hash (+ offset 1)) #xff)
			 (logand (aref hash (+ offset 2)) #xff)
			 (logand (aref hash (+ offset 3)) #xff)
			 power)))
	(string-to-number (shell-command-to-string out))))
    ))

(defun ocra-test-vectors ()
  (let ((ocra-test-key (string
			#x31 #x32 #x33 #x34 #x35 #x36 #x37 #x38 #x39 #x30
			#x31 #x32 #x33 #x34 #x35 #x36 #x37 #x38 #x39 #x30))
	q r e failed)

    (dolist
	(test '(;; Standard test vectors from RFC6287
		(00000000 . 237653)
		(11111111 . 243178)
		(22222222 . 653583)
		(33333333 . 740991)
		(44444444 . 608993)
		(55555555 . 388898)
		(66666666 . 816933)
		(77777777 . 224598)
		(88888888 . 750600)
		(99999999 . 294470)
		;; Some shorter tests to check mangle
		(11 . 807261)
		(111 . 901657)
		(1111 . 134216)
		(11111 . 861721)
		(111111 . 275430)
		(1111111 . 960547)
		))
      (setq q (car test))
      (setq r (ocra-generate q ocra-test-key "OCRA-1:HOTP-SHA1-6:QN08"))
      (setq e (cdr test))
      (unless (eq r e)
	(setq failed t)
	(message "%08u got %u/%x expected %u/%x" q r r e e))
    )

    (if failed
	(message "FAILED")
      (message "Success!"))
    ))

;(ocra-test-vectors)
