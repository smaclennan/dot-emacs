(require 'sam-common)

(my-feature-cond
  (xemacs
   (defun directory-files-recursive (dir &optional match)
     "Return a list of files in DIR recursively descending all
subdirectories that do not start in a dot (.). If MATCH is non-nil,
match all files against the regular expression."
     (let ((files (directory-files dir t match nil t)))
       (dolist (d (directory-files dir nil "^[^.].*" nil 'dirs))
	 (setq files (append files (directory-files-recursive (concat dir "/" d) match))))
       files))

   (defun insert-file-contents-safe (file)
	"XEmacs `insert-file-contents' cannot handle a zero length file"
	(when (> (nth 7 (file-attributes file)) 0)
	  (insert-file-contents file)))
   )
  (t
   (defun directory-files-recursive-intern (dir &optional match)
     "Internal function for `directory-files-recursive'."
     (let (files)
       (dolist (d (directory-files dir t "^[^.].*"))
	 (if (file-directory-p d)
	     (setq files (append files (directory-files-recursive-intern d match)))
	   (when (or (not match) (string-match match d))
	     (setq files (append files (list d))))))
       files))

   (defun directory-files-recursive (dir &optional match)
     "Return a list of files in DIR recursively descending all
subdirectories that do not start in a dot (.). If MATCH is non-nil,
match all files against the regular expression."
     (when match (setq match (concat "/" match)))
     (directory-files-recursive-intern dir match))

   (defsubst insert-file-contents-safe (file) (insert-file-contents file))
   ))

(defun mine (&optional all)
  "Return a list of all my .el files in `dot-dir'. If `all' is
non-nil, returns all .el files in `dot-dir'."
  (let* ((base (file-name-directory user-init-file))
	 (files (directory-files-recursive base ".*\.el$")))
    (unless all
      ;; esp files that are missing from gnu emacs
      (dolist (file '("esp/filladapt.el" "esp/igrep.el" "esp/rcfiles.el"
		      "esp/hide-copyleft.el"))
	(setq files (delete (concat base file) files)))

      ;; introspector/misc/xemacs not mine
      (dolist (file files)
	(when (string-match ".*/\\(introspector\\|misc\\|xemacs\\)/.*" file)
	  (setq files (delete (match-string 0 file) files)))))
    files))

;;;###autoload
(defun count-defuns (&optional all)
  (interactive "P")
  (let ((files (mine all))
	(count 0) (lines 0))
    (with-temp-buffer
      (dolist (file files)
	(insert-file-contents-safe file))
      (goto-char (point-min))
      (while (re-search-forward "(\\(defun\\|defmacro\\) " nil t)
	(setq count (1+ count)))
      (goto-char (point-max))
      (setq lines (count-lines (point-min) (point-max))))
    (message "files %d lines %d count %d" (length files) lines count)))
