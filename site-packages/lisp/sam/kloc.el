(defvar kloc-dir nil "*Klocwork project directory.")
(defvar kloc-cmd "kwcheck run -F short" "*Klocwork command.")

(require 'compile)
(require 'trim)

;;;###autoload
(defun kloc (arg)
  "Check the current buffer with klockwork. With an arg, ignore
guideline violations."
  (interactive "P")
  (let ((buff (get-buffer-create "*kloc*"))
	(cmd (concat kloc-cmd " -pd=" kloc-dir " " buffer-file-name))
	start)
    (message "%s" cmd)
    (shell-command cmd buff buff)
    (with-current-buffer buff

      ;; Skip the header
      (goto-char (point-min))
      (when (or (re-search-forward "Linking stage completed" nil t)
		(re-search-forward "up to date" nil t))
	(end-of-line) (forward-char))
      (setq start (point)) ;; always set it to something

      (when (string-match "detailed" cmd)
	;; Processing only required for detailed output
	(when arg
	  (goto-char start)
	  (while (re-search-forward "^.*Guideline Violation.*$" nil t)
	    (kill-whole-line 2) ;; next line will always be a comment
	    ))

	(when (string-match "\\<-y\\>" kloc-cmd)
	  (goto-char start)
	  (while (re-search-forward "^[0-9]+ (System: [0-9]+) " nil t)
	    (replace-match "")))

	(goto-char start)
	(while (re-search-forward "^[0-9]+ (Local) " nil t)
	  (replace-match ""))

	(trim-empty-lines))

      (goto-char start)
      (while (re-search-forward "^[^:]+:[0-9]+" nil t)
	(goto-char (match-end 0))
	(insert ":1"))

      (compilation-mode "kloc")
      (setq buffer-read-only nil)
      (compilation--parse-region start (point-max)))
    (display-buffer buff))
  (message "kloc done."))

;;;###autoload
(defun kloc-set-dir (dir)
  "Set the `kloc-dir' variable, prompts with current setting."
  (interactive
   (list (read-directory-name "Dir: " kloc-dir kloc-dir t)))
  (setq kloc-dir (expand-file-name dir)))

(provide 'kloc)
