;; hmac.el - Hash-based Message Authentication Code
;; Copyright (C) 2013 Sean MacLennan <seanm@seanm.ca>
;;
;; This program is free software: you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 2 of the License, or
;; (at your option) any later version.
;; 
;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.
;; 
;; You should have received a copy of the GNU General Public License
;; along with this project; see the file COPYING.  If not, write to
;; the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
;; Boston, MA 02111-1307, USA.

;(require 'ecrypto)

(defconst hmac-blocksize 64)
(defconst sha-digest-length 20)

;; ecrypto does not have a provide - load sha1
(load "sha1")

(eval-when-compile (load "sha1"))

(defun hmac-sha1 (key-in msg-in &optional binary)
  (let (key o-pad i-pad
	(key-len (length key-in)))

    (if (> key-len hmac-blocksize)
	(setq key (concat (sha1-binary key-in) (make-string (- hmac-blocksize sha-digest-length) 0)))
      (setq key (concat key-in (make-string (- hmac-blocksize key-len) 0))))

    (setq o-pad (make-string hmac-blocksize 0))
    (setq i-pad (make-string hmac-blocksize 0))

    (loop for i from 0 below hmac-blocksize do
      (aset o-pad i (logxor (aref key i) #x5c))
      (aset i-pad i (logxor (aref key i) #x36))
      )

    (if binary
	(sha1-binary (concat o-pad (sha1-binary (concat i-pad msg-in))))
      (sha1 (concat o-pad (sha1-binary (concat i-pad msg-in)))))
    ))

(provide 'hmac)
