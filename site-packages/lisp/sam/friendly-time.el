;; This is a silly little Lisp function for people who don't care
;; exactly what time it is.

(defvar ft-time-strings
  '(("o'clock" t)
    ("quarter past")
    ("half past")
    ("quarter to"))) ;; quarter of

(defvar ft-hour-strings
  '("twelve"
    "one"
    "two"
    "three"
    "four"
    "five"
    "six"
    "seven"
    "eight"
    "nine"
    "ten"
    "eleven"))

(defvar ft-short-version nil
  "*If non-nil display short version of friendly time.
 e.g. 5:30 rather than half past five")

(defun ft-get-time (&optional time)
  "Calculate current hour and quarter of an hour. If `TIME' is nil,
uses current time. Returns (HOUR QUARTER)."
  (let* ((now (decode-time time))
	 (seconds (+ (nth 0 now) (* (nth 1 now) 60)))
	 (hour (nth 2 now))
	 quarter)
    (cond
     ((< seconds  450) (setq quarter 0))
     ((< seconds 1350) (setq quarter 1))
     ((< seconds 2250) (setq quarter 2))
     ((< seconds 3150) (setq quarter 3 hour (1+ hour)))
     (t (setq quarter 0 hour (1+ hour))))
    (if (>= hour 12) (setq hour (- hour 12)))
    (list hour quarter)))

;;;###autoload
(defun friendly-time (&optional show time short)
  "Display a friendly version of the time.
Shows the time to the nearest quarter of an hour."
  (interactive "p")
  (let* ((now (ft-get-time time))
	 (hour (nth 0 now))
	 (quarter (nth 1 now))
	 str)
    (if (or ft-short-version short)
	(setq str (format "%d:%02d" hour (* quarter 15)))
      (let ((ts (nth quarter ft-time-strings)))
	(if (nth 1 ts)
	    (setq str (concat (nth hour ft-hour-strings) " "
			      (nth 0 ts)))
	  (setq str (concat (nth 0 ts) " "
			    (nth hour ft-hour-strings))))))
    (if show (message "%s" str))
    str))
