;;; xcomp.el --- Setup for cross-compile
;; Copyright (C) 2007-2010 Sean MacLennan
;; Used to be ppc-env

(provide 'xcomp)

(eval-when-compile (require 'my-compile))

;; Required variables

(defvar xcomp-toolchain-dir nil
  "*Base directory for toolchain.")

(defvar xcomp-kernel-dir nil
  "*Base dir for kernel source")

(defvar xcomp-cross-compile nil
  "*Cross compile prefix.")

(defvar xcomp-arch nil
  "*Arch value.")

;; Optional variables

(defvar xcomp-env-list nil
  "*List of extra env values to set")

;; Local variables

(defvar xcomp-saved-env nil
  "Internal list of original values.")

(defvar xcomp-is-set nil
  "Local variable... do not touch!")

(defvar xcomp-arch-string nil
  "The arch suitble for `minor-mode' name. Must start with a space.")

(add-minor-mode 'xcomp-is-set 'xcomp-arch-string)

;;;###autoload
(defun xcomp ()
  (interactive)

  (unless xcomp-arch
    (error "xcomp-arch must be set"))
  (unless xcomp-cross-compile
    (error "xcomp-cross-compile must be set"))
  (unless xcomp-toolchain-dir
    (error "xcomp-toolchain-dir must be set"))
  (unless xcomp-kernel-dir
    (error "xcomp-kernel-dir must be set"))

  (if xcomp-saved-env
      (xcomp-restore)
    (xcomp-set)))

;;;###autoload
(defun xcomp-set-kernel-dir (&optional dir)
  (interactive)
  (when (interactive-p)
    (setq dir (read-directory-name "Dir: " xcomp-kernel-dir))
    ;; Quick sanity check
    (unless (and (file-exists-p (concat dir "/kernel"))
		 (file-exists-p (concat dir "/mm")))
      (unless (y-or-n-p (concat dir " does not look like a kernel directory. "
				"Continue? "))
	(keyboard-quit))))
  (setq xcomp-kernel-dir (my-expand-dir-name dir))
  (xcomp-add-to-compile-dir-list xcomp-kernel-dir)
  (when xcomp-is-set
    ;; Don't use xcomp-doit, we don't want to lose the orignal value
    (setenv "KERNELSRCDIR" xcomp-kernel-dir)
    (setenv "KSRC" xcomp-kernel-dir)))

;;;###autoload
(defun xcomp-dump ()
  (interactive)
  (switch-to-buffer-other-window (get-buffer-create "*XCOMP ENV*"))
  (erase-buffer)

  (if xcomp-is-set
      (insert "Currently in xcomp mode.\n\n")
    (insert "Not in xcomp mode.\n\n"))

  (insert "Xcomp Variables:\n")
  (insert (format "  %-20s %s\n" "xcomp-toolchain-dir" (xcomp-check-dir xcomp-toolchain-dir)))
  (insert (format "  %-20s %s\n" "xcomp-kernel-dir" (xcomp-check-dir xcomp-kernel-dir)))
  (insert (format "  %-20s %s\n" "xcomp-cross-compile" xcomp-cross-compile))
  (insert (format "  %-20s %s\n" "xcomp-arch" xcomp-arch))

  (insert "\nEnvironment:\n")
  (dolist (env process-environment)
      (unless (string-match "^LS_COLORS=" env) ;; this one is evil
	(insert (format "  %s\n" env))))

  (goto-char (point-min)))

(defun xcomp-check-dir (dir)
  (if (file-exists-p dir)
      (concat dir " (valid)")
    (concat dir " (BAD)")))

(defun xcomp-set ()
  (xcomp-doit "ARCH" xcomp-arch)
  (xcomp-doit "CROSS_COMPILE" xcomp-cross-compile)
  (xcomp-doit "CC" (concat xcomp-cross-compile "gcc"))
  (xcomp-doit "CXX" (concat xcomp-cross-compile "g++"))
  (xcomp-doit "AS" (concat xcomp-cross-compile "as"))
  (xcomp-doit "PATH" (concat (getenv "PATH") ":" xcomp-toolchain-dir "/usr/bin"))
  (xcomp-doit "KERNELSRCDIR" xcomp-kernel-dir)
  ;; For Dahdi and others
  (xcomp-doit "KSRC" xcomp-kernel-dir)

  ;; Add this kernel to the compile dir list if necessary.
  ;; You can never have too many kernels ;)
  (xcomp-add-to-compile-dir-list xcomp-kernel-dir)

  ;; Add the user envs if necessary
  (dolist (env xcomp-env-list)
    (xcomp-doit (car env) (cadr env)))

  ;; Make sure the xcomp-arch-string is correct
  (if (string= xcomp-arch "powerpc")
      (setq xcomp-arch-string " PPC")
    (setq xcomp-arch-string (concat " " (upcase xcomp-arch))))

  (setq xcomp-is-set t))

(defun xcomp-restore ()
  (dolist (env xcomp-saved-env)
    (setenv (nth 0 env) (nth 1 env)))
  (setq xcomp-saved-env nil)

  (setq xcomp-is-set nil)
  )

(defun xcomp-add-to-compile-dir-list (dir)
  (when (boundp 'my-compile-dir-list)
    (setq my-compile-dir-list
	  (add-to-list 'my-compile-dir-list
		       (list dir nil 'linux-style)))))

(defun xcomp-doit (env val)
  "Save the old value and set the new value."
  ;; (message "setenv '%s' from '%s' to '%s'" env (getenv env) val)
  (let ((tmp (list (list env (getenv env)))))
    (setq xcomp-saved-env (nconc xcomp-saved-env tmp)))
  (setenv env val)
  )
