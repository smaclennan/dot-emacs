Motley is my attempt at a cscope-like program. The output should be
readable by cscope if -c is specified.

The basic concept is to strip out as much code as possible: what is
left should be the symbols we want. Motley is more or less stateless
and doesn't really know how to parse C.

Motley can only give definitions, it cannot find all the functions
that call a function for example. This greatly reduces the parsing and
the size of the output at a loss of functionality.

It also does not keep any information about functions other than the
function name. It cannot show args or return values.

So, really, Motley is more like ctags than cscope. But I have a nicer
cscope interface in Emacs than tags ;)

So why write motley? I am finding that cscope struggles with newer C
code. I am just getting too many false, or missing, results.

WARNING: Motley should be considered extremely experimental. In
particular, the native output format may change as I try different
ideas.



So how is the idea working? Very well actually. The two big problems
so far are enums and to a lesser extent typedefs of pointers to
functions. The goal was to have _getc() strip out almost everything.

As anyone who knows me knows, I don't like enums... so of course they
cause issues. Because of enums, you can't just remove all {} bodies
since you need it for the enum definitions. I may actually break down
and keep some state to know when I am in an enum.

Typedefs of pointer to function mean that you cannot just collapse ()
everywhere since you lose the typedef name. This would be easy to fix
if we had some look ahead.



Pie in the sky ideas
--------------------

One thing I would like to try is keeping track of typedefs and
replacing them with the actual base type. For example:

struct my_struct { int a; int b; int c; };

typedef struct my_struct my_struct_t;

It would be nice if my_struct_t actually pointed at my_struct rather
than the typedef line.


Maybe a get_word() (get_token() since not all the returns would be
words?) function might help. This would allow us to drop keywords we
don't care about like extern, static, inline, const, etc.
